Traceback (most recent call last):
  File "/Users/seanwalsh/Documents/Github-Mac-Laptop/philstatshomework2/.venv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/seanwalsh/Documents/Github-Mac-Laptop/philstatshomework2/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/seanwalsh/Documents/Github-Mac-Laptop/philstatshomework2/.venv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/asyncio/base_events.py", line 664, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/seanwalsh/Documents/Github-Mac-Laptop/philstatshomework2/.venv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/seanwalsh/Documents/Github-Mac-Laptop/philstatshomework2/.venv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/seanwalsh/Documents/Github-Mac-Laptop/philstatshomework2/.venv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import metakernel
import ipywidgets as widgets    
from ipywidgets import interact, interactive, fixed, interact_manual, FloatSlider, IntSlider
import networkx as nx
import seaborn as sns
pastel_colors = sns.color_palette("pastel")
from scipy.stats import nbinom, binom
from scipy.special import comb
 
import numpy as np                # load numpy package
import matplotlib.pyplot as plt   # load pyplot package
from scipy.stats import binom     # load binomial distribution

def Binomvisualalt(n,p,q,r,observed_value_1,observed_value_2, observed_value_3):

    s = 1-r

    v = np.arange(0, n) # values for x-axis
    Xpdf = binom.pmf(v, n, p) # pdf for X
    Xcdf = binom.cdf(v, n, p) # cdf for X
    Xccdf = 1-Xcdf               # ccdf for X
    Ypdf = binom.pmf(v, n, q) # pdf for Y
    Ycdf = binom.cdf(v, n, q) # cdf for Y
    Yccdf = 1-Ycdf               # ccdf for Y
    evidence = [r*Xpdf[i] + s*Ypdf[i] for i in range(n)]
    
    posteriorX = r*Xpdf/evidence
    posteriorY = s*Ypdf/evidence

    fig, axs = plt.subplots(1, 3, figsize=(10, 5))  # 1 row, 2 columns

    max_value = max(max(Xpdf), max(Ypdf))
    max_value_2 = max(max(posteriorX), max(posteriorY))

    axs[0].plot(v, Xpdf, label='%1.2f null' % p)
    axs[0].plot(v, Ypdf, label='%1.2f alternative' % q)
    axs[0].set_ylim(0, max_value+.1)
    axs[0].set_title('pdf of T_%i~ \n Binom(%i, %1.2f) vs. Binom(%i, %1.2f)' % (n,n,p, n, q))
    axs[0].axvline(x=observed_value_1, color='black', linestyle=':')
    axs[0].axvline(x=observed_value_2, color='black', linestyle=':')    
    axs[0].axvline(x=observed_value_3, color='black', linestyle=':')        
    axs[0].legend(loc='upper right') 

    axs[1].plot(v, Xpdf+Xccdf, label='Type I')
    axs[1].plot(v, Ycdf, color ='C1', label='Type II')
    axs[1].set_ylim(0, 1.1)
    axs[1].set_title('probability of \n Type I vs. II error \n as function of c')
    axs[1].set_xlabel('c')  # Add x-axis label
    axs[1].axhline(y=.05, color='r')
    axs[1].axvline(x=observed_value_1, color='black', linestyle=':')
    axs[1].axvline(x=observed_value_2, color='black', linestyle=':')    
    axs[1].axvline(x=observed_value_3, color='black', linestyle=':')      
    axs[1].legend(loc='upper right') 

    axs[2].plot(v, posteriorX, label='p(%1.2f|x)' % p)
    axs[2].plot(v, posteriorY, label='p(%1.2f|x)' % q)    
    axs[2].set_ylim(0, max_value_2+.1)
    axs[2].set_title('Bayesian posterior \n p(%1.2f|x) vs. p(%1.2f|x)' % (p, q))
    axs[2].set_xlabel('x')  # Add x-axis label
    axs[2].axhline(y=.05, color='r')
    axs[2].axvline(x=observed_value_1, color='black', linestyle=':')
    axs[2].axvline(x=observed_value_2, color='black', linestyle=':')    
    axs[2].axvline(x=observed_value_3, color='black', linestyle=':')      
    axs[2].legend(loc='center left')


------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[1], line 7[0m
[1;32m      5[0m [38;5;28;01mimport[39;00m [38;5;21;01mipywidgets[39;00m [38;5;28;01mas[39;00m [38;5;21;01mwidgets[39;00m    
[1;32m      6[0m [38;5;28;01mfrom[39;00m [38;5;21;01mipywidgets[39;00m [38;5;28;01mimport[39;00m interact, interactive, fixed, interact_manual, FloatSlider, IntSlider
[0;32m----> 7[0m [38;5;28;01mimport[39;00m [38;5;21;01mnetworkx[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnx[39;00m
[1;32m      8[0m [38;5;28;01mimport[39;00m [38;5;21;01mseaborn[39;00m [38;5;28;01mas[39;00m [38;5;21;01msns[39;00m
[1;32m      9[0m pastel_colors [38;5;241m=[39m sns[38;5;241m.[39mcolor_palette([38;5;124m"[39m[38;5;124mpastel[39m[38;5;124m"[39m)

[0;31mModuleNotFoundError[0m: No module named 'networkx'

